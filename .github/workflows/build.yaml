name: Build

on:
  # Run this workflow for pushes on all branches
  push:
    branches:
      - '**'
  # Run this workflow when a tag or branch is created
  create:
  # Run this workflow for pull requests
  pull_request:

jobs:
  run_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U coverage coveralls 'numpy>=1.16,<1.17'
        pip install .[test]
    - name: Run tests
      run: coverage run manage.py test --settings=observation_portal.test_settings
      env:
        DB_USER: postgres
        DB_PASS: postgres
        DB_HOST: localhost
        DB_PORT: 5432
    - name: Generate and send coveralls report
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_to_pypi:
    # Only run this job if the run_tests job has succeeded, and if
    # this workflow was triggered by the creation of a new tag
    needs: run_tests
    if: github.event_name == 'create' && github.event.ref_type == 'tag' && github.event.repository.fork == false
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build package and publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_OBS_PORTAL_API_TOKEN }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
      

  build_and_publish_image:
    # Only run this job if the run_tests job has succeeded, the new version was pushed to pypi,
    # and if this workflow was triggered by the creation of a new tag
    needs: [run_tests, publish_to_pypi]
    if: github.event_name == 'create' && github.event.ref_type == 'tag' && github.event.repository.fork == false
    runs-on: ubuntu-latest
    env:
      DOCKER_REPOSITORY: observatorycontrolsystem/observation-portal
      DOCKER_IMAGE_TAG: ${{ github.event.ref }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build image and push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          pull: true
          push: true
          tags: ${{ env.DOCKER_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
