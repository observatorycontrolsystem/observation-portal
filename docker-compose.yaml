version: '3.7'

# This docker-compose file brings up a full Observation Portal stack with Task Scheduler,
# Task Worker, and Example Frontend. There is also an associated container of redis for
# caching and task scheduling. You will want to modify the DB_* environment variables to
# connect to your db backend, and modify the *_URL environment variables to point to the
# location where you have the associated services running, like CONFIGDB.
services:
    redis:
        image: redis:3.2
        command: ["redis-server", "--appendonly", "yes"]
        restart: always
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 30
        ports:
            -  6373:6379
        volumes:
            -  ./data/redis:/data

    nginx:
        image: nginx:1.19.0-alpine
        ports:
            - 8000:80
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf
            - static_volume:/static
        depends_on:
            - observation_portal

    observation_portal:
        image: observatorycontrolsystem/observation-portal:3.5.4
        expose:
            - "8001"
        environment:
            # Note that 172.17.0.1 works for localhost on linux, but for mac you will
            # need to use `host.docker.internal` instead to point to localhost.
            - DB_HOST=172.17.0.1
            - DB_PORT=5432
            - DB_NAME=observationportal
            - DB_USER=postgres
            - DB_PASS=postgres
            - SECRET_KEY=obs_portal_secret_key
            - CONFIGDB_URL=http://172.17.0.1:7000
            - DOWNTIMEDB_URL=http://172.17.0.1:7500
            - ELASTICSEARCH_URL=
            - REQUESTGROUP_DATA_DOWNLOAD_URL=http://127.0.0.1:8000/requestgroups/{requestgroup_id}/
            - REQUEST_DETAIL_URL=http://127.0.0.1:8000/requests/{request_id}/
            - SCIENCE_APPLICATION_DETAIL_URL=http://127.0.0.1:8000/apply/{sciapp_id}/
            - OBSERVATION_PORTAL_BASE_URL=http://127.0.0.1:8000/
            - ORGANIZATION_EMAIL={my_organization_email}
            - ORGANIZATION_NAME={my_organization_name}
            - ORGANIZATION_DDT_EMAIL={my_organization_directors_email}
            - ORGANIZATION_SUPPORT_EMAIL={my_organization_support_email}
            - ORGANIZATION_ADMIN_EMAIL={my_organization_web_admin_email}
            - DRAMATIQ_BROKER_HOST=redis
            - DRAMATIQ_BROKER_PORT=6379
            - MAX_FAILURES_PER_REQUEST=3
            - CORS_ALLOW_CREDENTIALS=true
            - CORS_ORIGIN_WHITELIST=http://localhost:8080,http://127.0.0.1:8080
            - CSRF_TRUSTED_ORIGINS=localhost:8080,127.0.0.1:8080
        mem_limit: "512m"
        restart: always
        volumes:
            - static_volume:/static
        command: >
            sh -c "python manage.py migrate
            && python manage.py collectstatic --no-input
            && gunicorn --bind=0.0.0.0:8001 --worker-class=gevent --workers=4 --access-logfile=- --error-logfile=- observation_portal.wsgi:application --timeout=300"
        depends_on:
            redis:
                condition: service_healthy

    dramatiq_task_scheduler:
        image: observatorycontrolsystem/observation-portal:3.5.4
        environment:
            - DB_HOST=172.17.0.1
            - DB_PORT=5432
            - DB_NAME=observationportal
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - SECRET_KEY=obs_portal_secret_key
            - CONFIGDB_URL=http://172.17.0.1:7000
            - DOWNTIMEDB_URL=http://172.17.0.1:7500
            - ELASTICSEARCH_URL=
            - CORS_ALLOW_CREDENTIALS=true
            - CORS_ORIGIN_WHITELIST=http://localhost:8080,http://127.0.0.1:8080
            - CSRF_TRUSTED_ORIGINS=localhost:8080,127.0.0.1:8080
            - DRAMATIQ_BROKER_HOST=redis
            - DRAMATIQ_BROKER_PORT=6379
        mem_limit: "512m"
        restart: always
        command: >
            sh -c "python manage.py runscript observation_portal.task_scheduler"
        depends_on:
            redis:
                condition: service_healthy

    dramatiq_worker:
        image: observatorycontrolsystem/observation-portal:3.5.4
        environment:
            - DB_HOST=172.17.0.1
            - DB_PORT=5432
            - DB_NAME=observationportal
            - DB_USER=postgres
            - DB_PASSWORD=postgres
            - DEBUG=true
            - SECRET_KEY=obs_portal_secret_key
            - CONFIGDB_URL=http://172.17.0.1:7000
            - DOWNTIMEDB_URL=http://172.17.0.1:7500
            - ELASTICSEARCH_URL=
            - CORS_ALLOW_CREDENTIALS=true
            - CORS_ORIGIN_WHITELIST=http://localhost:8080,http://127.0.0.1:8080
            - CSRF_TRUSTED_ORIGINS=localhost:8080,127.0.0.1:8080
            - DRAMATIQ_BROKER_HOST=redis
            - DRAMATIQ_BROKER_PORT=6379
        mem_limit: "512m"
        restart: always
        command: >
            sh -c "python manage.py rundramatiq --processes 2 --threads 4"
        depends_on:
            redis:
                condition: service_healthy

    # This provides a simple example frontend that can view and schedule Requests using
    # the Observation Portal API backend and components from the ocs-component-lib.
    obs_portal_frontend:
        image: observatorycontrolsystem/ocs-example-frontend:0.1.0
        ports:
            - "8080:8080"
        restart: always
        environment:
            -  VUE_APP_OBSERVATION_PORTAL_API_URL=http://127.0.0.1:8000
            -  INTERNAL_OBSERVATION_PORTAL_API_URL=http://127.0.0.1:8000
        entrypoint: /entrypoint.sh
        depends_on:
            - observation_portal

volumes:
    static_volume:
